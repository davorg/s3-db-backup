#! /usr/bin/perl

use v5.10;
use strict;
use warnings;

use Getopt::Long qw<GetOptions :config gnu_getopt>;
use DateTime;

my $USAGE = <<'EOF';
Usage: db_backup [OPTION]...

Back up databases, and clean up old backups.  Expects to be run hourly.

Options:

  -v  Verbose mode
  -u USER
      Connect to the database as the given USER (required)
  -p PASSWORD
      Connect to the database with the given PASSWORD
  -d BACKUP_DIR
      Store and delete backups in the given BACKUP_DIR (required)
  -P PREFIX
      Fixed part of filename
  -B Amazon S3 bucket to use
  -t The date and time to use (defaults to using the current time)

EOF
GetOptions(\my %OPT, qw<help|? v u=s p=s d=s t=s P=s B=s>) or die $USAGE;
if ($OPT{help}) {
    print $USAGE;
    exit 0;
}

for (qw<u d>) {
    die "The -$_ option is required" if !exists $OPT{$_};
}

my $PREFIX = $OPT{P} || 'magnum_db.sql';
my $BUCKET = $OPT{B};

{
    chdir $OPT{d} or die "Can't chdir to $OPT{d}: $!\n";
    my $now = now();
    my %wanted = map { $_ => 1 } times_to_keep($now);
    my @to_delete;
    for (glob "$PREFIX.*") {
        my ($ymdh) = /\A\Q$PREFIX\E\.([0-9]{10})[0-9]{2}\.gz\z/xms or next;
        push @to_delete, $_ if !$wanted{$ymdh};
    }
    note('Generating backup for ', $now->iso8601);
    backup($PREFIX . $now->strftime('.%Y%m%d%H%M'));
    if (@to_delete) {
        note('Cleaning up ', scalar @to_delete, ' old backups');
        for (@to_delete) {
            unlink $_ or die "Can't delete $_: $!\n";
            if ($BUCKET) {
                note("Deleting $_ from S3");
                system "s3cmd --no-progress del s3://$BUCKET/$_";
            }
        }
    }
    note('All done!');
}

sub backup {
    my ($output_file) = @_;

    $output_file .= '.gz' unless $output_file =~ /\.gz$/;

    my @creds = "-u\Q$OPT{u}\E";
    push @creds, "-p\Q$OPT{p}\E" if exists $OPT{p};

    system "mysqldump --opt @creds --all-databases | gzip > \Q$output_file\E";
    if ($? != 0) {
        unlink $output_file
            or die "Can't delete incomplete $OPT{d}/$output_file: $!\n";
        die "mysqldump exited unsuccessfully; no backup created\n";
    }

    if ($BUCKET && -e $output_file) {
        system "s3cmd --no-progress put $output_file s3://$BUCKET/";
    }
}

sub now {

    return DateTime->now if !$OPT{t};
    my $rx = join '[^0-9]', ('([0-9]+)') x 6;
    my ($y, $m, $d, $h, $i, $s) = $OPT{t} =~ /\A$rx\z/xms
        or die "Can't parse date/time\n";
    return DateTime->new(
        year => $y, month  => $m, day    => $d,
        hour => $h, minute => $i, second => $s,
    );
}

sub times_to_keep {
    my ($now) = @_;
    my @times;
    my $dt = $now->clone->add(hours => 1);
    for (1 .. 24) {
        $dt->subtract(hours => 1);
        push @times, $dt->clone;
    }
    if ($dt->hour == 0) {
        $dt->subtract(days => 1);
    }
    else {
        $dt->set_hour(0);
    }
    for (1 .. 7) {
        push @times, $dt->clone;
        $dt->subtract(days => 1);
    }
    return map { $_->strftime('%Y%m%d%H') } reverse @times;
}

sub note {
    say STDERR @_ if $OPT{v};
}
